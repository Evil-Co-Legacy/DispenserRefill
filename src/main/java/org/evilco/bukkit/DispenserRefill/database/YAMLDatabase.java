/**
 * 
 */
package org.evilco.bukkit.DispenserRefill.database;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.Vector;
import java.util.logging.Logger;

import org.bukkit.Location;
import org.bukkit.plugin.java.JavaPlugin;

import com.sk89q.util.yaml.YAMLFormat;
import com.sk89q.util.yaml.YAMLNode;
import com.sk89q.util.yaml.YAMLProcessor;


/**
 * @author		Johannes Donath
 * @copyright		2013 Evil-Co.de
 * @license		GNU Lesser Public License <http://www.gnu.org/licenses/lgpl.txt>
 */
public class YAMLDatabase {
	
	/**
	 * Defines the database header (Which just describes the file content and is pretty pointless for the application itself).
	 */
	public static final String FILE_HEADER =	"# DispenserRefill container file\r\n" +
							"#\r\n" +
							"# WARNING: THIS FILE IS AUTOMATICALLY GENERATED. If you modify this file by\r\n" +
							"# hand, be aware that A SINGLE MISTYPED CHARACTER CAN CORRUPT THE FILE. If\r\n" +
							"# DispenserRefill is unable to parse the file, your containers will FAIL TO LOAD and\r\n" +
							"# the contents of this file will reset. Please use a YAML validator such as\r\n" +
							"# http://yaml-online-parser.appspot.com (for smaller files).\r\n" +
							"#\r\n" +
							"# REMEMBER TO KEEP PERIODICAL BACKUPS.\r\n" +
							"#";
	
	/**
	 * Stores the database YAML processor.
	 */
	protected YAMLProcessor database;
	
	/**
	 * Stores the file which is used for the database.
	 */
	protected File databaseFile;
	
	/**
	 * Stores a list of infinite containers.
	 */
	protected List<InfiniteContainer> containerList;
	
	/**
	 * Stores the logger to use.
	 */
	protected Logger logger;
	
	/**
	 * Stores the parent plugin instance.
	 */
	protected JavaPlugin plugin;
	
	/**
	 * Constructs the database.
	 * @throws FileNotFoundException 
	 */
	public YAMLDatabase(File databaseFile, Logger logger, JavaPlugin plugin) throws FileNotFoundException {
		// store parameters
		this.logger = logger;
		this.databaseFile = databaseFile;
		this.plugin = plugin;
		
		// create file (if nessecary)
		if (!databaseFile.exists()) {
			try {
				databaseFile.createNewFile();
			} catch (IOException ex) {
				throw new FileNotFoundException("Cannot create database file " + databaseFile.getPath() + "!");
			}
		}
		
		// create instance database
		this.containerList = new Vector<InfiniteContainer>();
		
		// create YAML instance
		this.database = new YAMLProcessor(databaseFile, false, YAMLFormat.COMPACT);
	}
	
	/**
	 * Returns the current container list.
	 * @return
	 */
	public List<InfiniteContainer> getContainerList() {
		return this.containerList;
	}
	
	/**
	 * Loads a database.
	 * @throws ContainerDatabaseException
	 */
	public void load() throws ContainerDatabaseException {
		try {
			this.database.load();
		} catch (IOException ex) {
			throw new ContainerDatabaseException(ex);
		}
		
		// get dispensers
		Map<String, YAMLNode> containers = this.database.getNodes("containers"); // XXX: This is already named containers as we plan to make multiple container types infinite!
		
		try {
			for(Map.Entry<String, YAMLNode> container : containers.entrySet()) {
				String key = container.getKey();
				YAMLNode node = container.getValue();
				
				try {
					// get parameters
					Location location = new Location(plugin.getServer().getWorld(UUID.fromString(node.getString("world"))), node.getDouble("x"), node.getDouble("y"), node.getDouble("z"));
					
					// create dispenser
					InfiniteContainer dispenser = new InfiniteContainer(location, node.getInt("cooldown"));
					
					// store
					this.containerList.add(dispenser);
				} catch (NullPointerException ex) {
					this.logger.info("Got malformed container data for element " + key + "! Ignored item.");
				}
			}
		} catch (NullPointerException ex) {
			this.logger.info("Got an empty container file. Nothing to load.");
		}
	}
	
	/**
	 * Updates the container database.
	 * @throws ContainerDatabaseException
	 */
	public void save() throws ContainerDatabaseException {
		// clear database
		this.database.clear();
		
		// add containers
		for(InfiniteContainer dispenser : this.containerList) {
			// create node
			YAMLNode node = this.database.addNode("containers." + dispenser.hashCode());
			
			// add data
			node.setProperty("world", dispenser.getLocation().getWorld().getUID().toString());
			node.setProperty("x", dispenser.getLocation().getBlockX());
			node.setProperty("y", dispenser.getLocation().getBlockY());
			node.setProperty("z", dispenser.getLocation().getBlockZ());
			node.setProperty("cooldown", dispenser.getCooldown());
		}
		
		// set database header
		this.database.setHeader(FILE_HEADER);
		
		// store
		this.database.save();
	}
}
